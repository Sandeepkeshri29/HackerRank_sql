
With max AS (

SELECT
	  datepart(month,record_date) AS month_max,
	  MAX(data_value) AS max_value
FROM   temperature_records
GROUP BY datepart(month,record_date)
-- ORDER BY datepart(month,record_date)
),
min AS(
        SELECT
			datepart(month,record_date) AS month_min,
			MIN(data_value) AS min_value
FROM    temperature_records
GROUP BY datepart(month,record_date)
-- ORDER BY datepart(month,record_date)
),
  AVG AS(
	  SELECT
			datepart(month,record_date) AS month_avg,
			ROUND(AVG(CAST(data_value AS FLOAT)),0) as avg_value
FROM   temperature_records
WHERE  data_type LIKE 'avg'
GROUP BY datepart(month,record_date), data_type
-- ORDER BY datepart(month,record_date)
)

SELECT
	  month_max,
	  max_value,
	  min_value,
       avg_value
FROM   max
JOIN   min ON min.month_min = max.month_max
JOIN   avg ON avg.month_avg = max.month_max


-- second shorter Solution from Ivan Jonathan:

SELECT
    datepart(month,record_date) AS month,
    MAX(case when data_type = 'max' then data_value else null end) AS max_value,
    MIN(case when data_type = 'min' then data_value else null end) AS min_value,
    ROUND(AVG(case when data_type = 'avg' then CAST(data_value as FLOAt) else null end),0) as avg_value
from temperature_records
group by datepart(month,record_date);
